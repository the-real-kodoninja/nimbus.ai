import { loadStripe, Stripe } from '@stripe/stripe-js';
import { Actor, HttpAgent } from '@dfinity/agent';
import { idlFactory } from '../declarations/nimbus_marketplace'; // Generated by dfx

const stripePromise = loadStripe('your-stripe-public-key'); // Replace with your Stripe key
const canisterId = 'your-canister-id'; // Replace with your canister ID
const agent = new HttpAgent({ host: 'https://ic0.app' });
const marketplaceActor = Actor.createActor(idlFactory, { agent, canisterId });

interface Item {
  itemId: number;
  name: string;
  price: number; // In ICP or USD
}

export const buyWithCrypto = async (item: Item, userPrincipal: string) => {
  // Simulate ICP payment (integrate with ICP Ledger in a real app)
  const result = await marketplaceActor.buyItem(item.itemId);
  return result;
};

export const buyWithStripe = async (item: Item) => {
  const stripe = await stripePromise;
  if (!stripe) throw new Error('Stripe not initialized');

  // Create a payment session with Stripe
  const response = await fetch('/api/create-checkout-session', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ itemId: item.itemId, name: item.name, price: item.price }),
  });
  const session = await response.json();

  const result = await stripe.redirectToCheckout({ sessionId: session.id });
  if (result.error) throw new Error(result.error.message);

  // On successful payment, call buyItem on the canister
  await marketplaceActor.buyItem(item.itemId);
};
